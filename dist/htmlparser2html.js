"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _handleNonstdTags = require("./handle-nonstd-tags");

const voidElements = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

const getAttrStr = item => {
  if (item.attribs && Object.keys(item.attribs).length > 0) {
    // removes any attributes that have a value of undefined
    let attrs = Object.keys(item.attribs).filter(key => {
      return item.attribs[key] !== undefined;
    }).map(key => {
      return item.attribs[key] === '' ? key : `${key}="${item.attribs[key]}"`;
    });

    if (attrs.length > 0) {
      attrs[0] = ` ${attrs[0]}`;
    }

    return attrs.join(' ');
  } else {
    return '';
  }
};

const html = (item, parent, eachFn, nonStdHandler) => {
  if (Array.isArray(item)) {
    return item.map(subItem => html(subItem, parent, eachFn, nonStdHandler)).join('');
  }

  let original = item;

  if (eachFn) {
    item = eachFn(item, parent);
  }

  if (item != undefined && item.type !== undefined) {
    switch (item.type) {
      case 'text':
        return item.data;

      case 'directive':
        return `<${item.data}>`;

      case 'comment':
        return `<!-- ${item.data} -->`;

      case 'style':
      case 'script':
      case 'tag':
        let attrStr = getAttrStr(item); // check to see if tag is a serverside element that we need to handle

        if (!_handleNonstdTags.validHtmlTags.includes(item.name.toLowerCase())) {
          if (nonStdHandler(item) === '[void]') {
            return `<${item.name}${attrStr} />${html(item.children, original, eachFn, nonStdHandler)}`;
          }

          return `<${item.name}${attrStr}>${html(item.children, original, eachFn, nonStdHandler)}${nonStdHandler(item) || ''}`;
        }

        let result = '';

        if (item.children.length > 0) {
          if (!original.render) {
            original = parent;
          }

          const children = html(item.children, original, eachFn, nonStdHandler);
          result = `<${item.name}${attrStr}>${children}</${item.name}>`;
        } else if (voidElements.includes(item.name)) {
          result = `<${item.name}${attrStr} />`;
        } else {
          result = `<${item.name}></${item.name}>`;
        }

        return result;

      case 'cdata':
        return `<![CDATA[${item.data}]]>`;
    }
  }

  return item;
};

var _default = (dom, eachFn, nonStdHandler) => html(dom, null, eachFn, nonStdHandler);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9odG1scGFyc2VyMmh0bWwuanMiXSwibmFtZXMiOlsidm9pZEVsZW1lbnRzIiwic2VydmVyU2lkZUVsZW1lbnRzIiwiaHRtbCIsIml0ZW0iLCJwYXJlbnQiLCJlYWNoRm4iLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJzdWJJdGVtIiwiam9pbiIsIm9yaWdpbmFsIiwidW5kZWZpbmVkIiwidHlwZSIsImRhdGEiLCJpbmNsdWRlcyIsIm5hbWUiLCJjaGlsZHJlbiIsInJhdyIsInJlc3VsdCIsImF0dHJTdHIiLCJhdHRyaWJzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImF0dHJzIiwiZmlsdGVyIiwia2V5IiwicmVuZGVyIiwiZG9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxZQUFZLEdBQUcsQ0FDbkIsTUFEbUIsRUFFbkIsTUFGbUIsRUFHbkIsSUFIbUIsRUFJbkIsS0FKbUIsRUFLbkIsT0FMbUIsRUFNbkIsSUFObUIsRUFPbkIsS0FQbUIsRUFRbkIsT0FSbUIsRUFTbkIsUUFUbUIsRUFVbkIsTUFWbUIsRUFXbkIsTUFYbUIsRUFZbkIsT0FabUIsRUFhbkIsUUFibUIsRUFjbkIsT0FkbUIsRUFlbkIsS0FmbUIsQ0FBckI7QUFrQkEsTUFBTUMsa0JBQWtCLEdBQUcsQ0FDekIsR0FEeUIsRUFFekIsSUFGeUIsRUFHekIsSUFIeUIsRUFJekIsSUFKeUIsRUFLekIsSUFMeUIsRUFNekIsS0FOeUIsRUFPekIsV0FQeUIsRUFRekIsSUFSeUIsRUFTekIsR0FUeUIsQ0FBM0I7O0FBWUEsTUFBTUMsSUFBSSxHQUFHLENBQUNDLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxNQUFmLEtBQTBCO0FBQ3JDLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixJQUFkLENBQUosRUFBeUI7QUFDdkIsV0FBT0EsSUFBSSxDQUFDSyxHQUFMLENBQVNDLE9BQU8sSUFBSVAsSUFBSSxDQUFDTyxPQUFELEVBQVVMLE1BQVYsRUFBa0JDLE1BQWxCLENBQXhC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QUFJLENBQUNhLElBQUssR0FBdEM7QUFDRDs7QUFDRCxlQUFPRyxNQUFQOztBQUNGLFdBQUssT0FBTDtBQUNFLGVBQVEsWUFBV2hCLElBQUksQ0FBQ1csSUFBSyxLQUE3QjtBQW5ESjtBQXFERDs7QUFFRCxTQUFPWCxJQUFQO0FBQ0QsQ0FuRUQ7O2VBcUVlLENBQUMwQixHQUFELEVBQU14QixNQUFOLEtBQWlCSCxJQUFJLENBQUMyQixHQUFELEVBQU0sSUFBTixFQUFZeEIsTUFBWixDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgdm9pZEVsZW1lbnRzID0gW1xuICAnYXJlYScsXG4gICdiYXNlJyxcbiAgJ2JyJyxcbiAgJ2NvbCcsXG4gICdlbWJlZCcsXG4gICdocicsXG4gICdpbWcnLFxuICAnaW5wdXQnLFxuICAna2V5Z2VuJyxcbiAgJ2xpbmsnLFxuICAnbWV0YScsXG4gICdwYXJhbScsXG4gICdzb3VyY2UnLFxuICAndHJhY2snLFxuICAnd2JyJ1xuXTtcblxuY29uc3Qgc2VydmVyU2lkZUVsZW1lbnRzID0gW1xuICAnJScsXG4gICclIycsXG4gICclOicsXG4gICclPScsXG4gICclQCcsXG4gICclLS0nLFxuICAnJS0tdGFnbGliJyxcbiAgJz89JyxcbiAgJz8nLFxuXTtcblxuY29uc3QgaHRtbCA9IChpdGVtLCBwYXJlbnQsIGVhY2hGbikgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgIHJldHVybiBpdGVtLm1hcChzdWJJdGVtID0+IGh0bWwoc3ViSXRlbSwgcGFyZW50LCBlYWNoRm4pKS5qb2luKCcnKTtcbiAgfVxuXG4gIGxldCBvcmlnaW5hbCA9IGl0ZW07XG4gIGlmIChlYWNoRm4pIHtcbiAgICBpdGVtID0gZWFjaEZuKGl0ZW0sIHBhcmVudCk7XG4gIH1cblxuICBpZiAoaXRlbSAhPSB1bmRlZmluZWQgJiYgaXRlbS50eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBzd2l0Y2ggKGl0ZW0udHlwZSkge1xuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIHJldHVybiBpdGVtLmRhdGE7XG5cbiAgICAgIGNhc2UgJ2RpcmVjdGl2ZSc6XG4gICAgICAgIHJldHVybiBgPCR7aXRlbS5kYXRhfT5gO1xuXG4gICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgcmV0dXJuIGA8IS0tICR7aXRlbS5kYXRhfSAtLT5gO1xuXG4gICAgICBjYXNlICdzdHlsZSc6XG4gICAgICBjYXNlICdzY3JpcHQnOlxuICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHRhZyBpcyBhIHNlcnZlcnNpZGUgZWxlbWVudCB0aGF0IHdlIGRvbid0IHdhbnQgdG8gYm90aGVyIHdpdGhcbiAgICAgICAgaWYgKHNlcnZlclNpZGVFbGVtZW50cy5pbmNsdWRlcyhpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBgPCR7aXRlbS5yYXd9PiR7aHRtbChpdGVtLmNoaWxkcmVuLCBvcmlnaW5hbCwgZWFjaEZuKX1gO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYDwke2l0ZW0ucmF3fT5gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgbGV0IGF0dHJTdHIgPSAnJztcbiAgICAgICAgaWYgKGl0ZW0uYXR0cmlicyAmJiBPYmplY3Qua2V5cyhpdGVtLmF0dHJpYnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyByZW1vdmVzIGFueSBhdHRyaWJ1dGVzIHRoYXQgaGF2ZSBhIHZhbHVlIG9mIHVuZGVmaW5lZFxuICAgICAgICAgIGxldCBhdHRycyA9IE9iamVjdC5rZXlzKGl0ZW0uYXR0cmlicykuZmlsdGVyKGtleSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5hdHRyaWJzW2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIFxuICAgICAgICAgIC5tYXAoa2V5ID0+IGAke2tleX09XCIke2l0ZW0uYXR0cmlic1trZXldfVwiYCk7XG4gICAgICAgICAgaWYgKGF0dHJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF0dHJzWzBdID0gYCAke2F0dHJzWzBdfWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF0dHJTdHIgPSBhdHRycy5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICAgIGlmICghb3JpZ2luYWwucmVuZGVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbCA9IHBhcmVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGh0bWwoaXRlbS5jaGlsZHJlbiwgb3JpZ2luYWwsIGVhY2hGbilcbiAgICAgICAgICByZXN1bHQgPSBgPCR7aXRlbS5uYW1lfSR7YXR0clN0cn0+JHtjaGlsZHJlbn08LyR7aXRlbS5uYW1lfT5gO1xuICAgICAgICB9IGVsc2UgaWYgKHZvaWRFbGVtZW50cy5pbmNsdWRlcyhpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gYDwke2l0ZW0ubmFtZX0ke2F0dHJTdHJ9IC8+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBgPCR7aXRlbS5uYW1lfT48LyR7aXRlbS5uYW1lfT5gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICBjYXNlICdjZGF0YSc6XG4gICAgICAgIHJldHVybiBgPCFbQ0RBVEFbJHtpdGVtLmRhdGF9XV0+YFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVtO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoZG9tLCBlYWNoRm4pID0+IGh0bWwoZG9tLCBudWxsLCBlYWNoRm4pOyJdfQ==