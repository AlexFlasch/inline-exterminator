"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const voidElements = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];
const serverSideElements = ['%', '%#', '%:', '%=', '%@', '%@page', 'jsp:param', 'bean:write', '%--', '%--taglib', '?=', '?'];

const html = (item, parent, eachFn) => {
  if (Array.isArray(item)) {
    return item.map(subItem => html(subItem, parent, eachFn)).join('');
  }

  let original = item;

  if (eachFn) {
    item = eachFn(item, parent);
  }

  if (item != undefined && item.type !== undefined) {
    switch (item.type) {
      case 'text':
        return item.data;

      case 'directive':
        return `<${item.data}>`;

      case 'comment':
        return `<!-- ${item.data} -->`;

      case 'style':
      case 'script':
      case 'tag':
        // check to see if tag is a serverside element that we don't want to bother with
        if (serverSideElements.includes(item.name)) {
          if (item.children) {
            return `<${item.raw}>${html(item.children, original, eachFn)}`;
          } else {
            return `<${item.raw}>`;
          }
        }

        let result = '';
        let attrStr = '';

        if (item.attribs && Object.keys(item.attribs).length > 0) {
          // removes any attributes that have a value of undefined
          let attrs = Object.keys(item.attribs).filter(key => {
            return item.attribs[key] !== undefined;
          }).map(key => `${key}="${item.attribs[key]}"`);

          if (attrs.length > 0) {
            attrs[0] = ` ${attrs[0]}`;
          }

          attrStr = attrs.join(' ');
        }

        if (item.children) {
          if (!original.render) {
            original = parent;
          }

          const children = html(item.children, original, eachFn);
          result = `<${item.name}${attrStr}>${children}</${item.name}>`;
        } else if (voidElements.includes(item.name)) {
          result = `<${item.name}${attrStr} />`;
        } else {
          result = `<${item.name}></${item.name}>`;
        }

        return result;

      case 'cdata':
        return `<![CDATA[${item.data}]]>`;
    }
  }

  return item;
};

var _default = (dom, eachFn) => html(dom, null, eachFn);

<<<<<<< Updated upstream
exports.default = _default;
=======
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9odG1scGFyc2VyMmh0bWwuanMiXSwibmFtZXMiOlsidm9pZEVsZW1lbnRzIiwic2VydmVyU2lkZUVsZW1lbnRzIiwiaHRtbCIsIml0ZW0iLCJwYXJlbnQiLCJlYWNoRm4iLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJzdWJJdGVtIiwiam9pbiIsIm9yaWdpbmFsIiwidW5kZWZpbmVkIiwidHlwZSIsImRhdGEiLCJpbmNsdWRlcyIsIm5hbWUiLCJjaGlsZHJlbiIsInJhdyIsInJlc3VsdCIsImF0dHJTdHIiLCJhdHRyaWJzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImF0dHJzIiwiZmlsdGVyIiwia2V5IiwicmVuZGVyIiwiZG9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxZQUFZLEdBQUcsQ0FDbkIsTUFEbUIsRUFFbkIsTUFGbUIsRUFHbkIsSUFIbUIsRUFJbkIsS0FKbUIsRUFLbkIsT0FMbUIsRUFNbkIsSUFObUIsRUFPbkIsS0FQbUIsRUFRbkIsT0FSbUIsRUFTbkIsUUFUbUIsRUFVbkIsTUFWbUIsRUFXbkIsTUFYbUIsRUFZbkIsT0FabUIsRUFhbkIsUUFibUIsRUFjbkIsT0FkbUIsRUFlbkIsS0FmbUIsQ0FBckI7QUFrQkEsTUFBTUMsa0JBQWtCLEdBQUcsQ0FDekIsR0FEeUIsRUFFekIsSUFGeUIsRUFHekIsSUFIeUIsRUFJekIsSUFKeUIsRUFLekIsSUFMeUIsRUFNekIsUUFOeUIsRUFPekIsV0FQeUIsRUFRekIsWUFSeUIsRUFTekIsS0FUeUIsRUFVekIsV0FWeUIsRUFXekIsSUFYeUIsRUFZekIsR0FaeUIsQ0FBM0I7O0FBZUEsTUFBTUMsSUFBSSxHQUFHLENBQUNDLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxNQUFmLEtBQTBCO0FBQ3JDLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixJQUFkLENBQUosRUFBeUI7QUFDdkIsV0FBT0EsSUFBSSxDQUFDSyxHQUFMLENBQVNDLE9BQU8sSUFBSVAsSUFBSSxDQUFD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LEdBQUksSUFBR2hCLElBQUksQ0FBQ2EsSUFBSyxNQUFLYixJQUFJLENBQUNhLElBQUssR0FBdEM7QUFDRDs7QUFDRCxlQUFPRyxNQUFQOztBQUNGLFdBQUssT0FBTDtBQUNFLGVBQVEsWUFBV2hCLElBQUksQ0FBQ1csSUFBSyxLQUE3QjtBQW5ESjtBQXFERDs7QUFFRCxTQUFPWCxJQUFQO0FBQ0QsQ0FuRUQ7O2VBcUVlLENBQUMwQixHQUFELEVBQU14QixNQUFOLEtBQWlCSCxJQUFJLENBQUMyQixHQUFELEVBQU0sSUFBTixFQUFZeEIsTUFBWixDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgdm9pZEVsZW1lbnRzID0gW1xuICAnYXJlYScsXG4gICdiYXNlJyxcbiAgJ2JyJyxcbiAgJ2NvbCcsXG4gICdlbWJlZCcsXG4gICdocicsXG4gICdpbWcnLFxuICAnaW5wdXQnLFxuICAna2V5Z2VuJyxcbiAgJ2xpbmsnLFxuICAnbWV0YScsXG4gICdwYXJhbScsXG4gICdzb3VyY2UnLFxuICAndHJhY2snLFxuICAnd2JyJ1xuXTtcblxuY29uc3Qgc2VydmVyU2lkZUVsZW1lbnRzID0gW1xuICAnJScsXG4gICclIycsXG4gICclOicsXG4gICclPScsXG4gICclQCcsXG4gICclQHBhZ2UnLFxuICAnanNwOnBhcmFtJyxcbiAgJ2JlYW46d3JpdGUnLFxuICAnJS0tJyxcbiAgJyUtLXRhZ2xpYicsXG4gICc/PScsXG4gICc/Jyxcbl07XG5cbmNvbnN0IGh0bWwgPSAoaXRlbSwgcGFyZW50LCBlYWNoRm4pID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICByZXR1cm4gaXRlbS5tYXAoc3ViSXRlbSA9PiBodG1sKHN1Ykl0ZW0sIHBhcmVudCwgZWFjaEZuKSkuam9pbignJyk7XG4gIH1cblxuICBsZXQgb3JpZ2luYWwgPSBpdGVtO1xuICBpZiAoZWFjaEZuKSB7XG4gICAgaXRlbSA9IGVhY2hGbihpdGVtLCBwYXJlbnQpO1xuICB9XG5cbiAgaWYgKGl0ZW0gIT0gdW5kZWZpbmVkICYmIGl0ZW0udHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICByZXR1cm4gaXRlbS5kYXRhO1xuXG4gICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICByZXR1cm4gYDwke2l0ZW0uZGF0YX0+YDtcblxuICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgIHJldHVybiBgPCEtLSAke2l0ZW0uZGF0YX0gLS0+YDtcblxuICAgICAgY2FzZSAnc3R5bGUnOlxuICAgICAgY2FzZSAnc2NyaXB0JzpcbiAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgIC8vIGNoZWNrIHRvIHNlZSBpZiB0YWcgaXMgYSBzZXJ2ZXJzaWRlIGVsZW1lbnQgdGhhdCB3ZSBkb24ndCB3YW50IHRvIGJvdGhlciB3aXRoXG4gICAgICAgIGlmIChzZXJ2ZXJTaWRlRWxlbWVudHMuaW5jbHVkZXMoaXRlbS5uYW1lKSkge1xuICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICByZXR1cm4gYDwke2l0ZW0ucmF3fT4ke2h0bWwoaXRlbS5jaGlsZHJlbiwgb3JpZ2luYWwsIGVhY2hGbil9YDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGA8JHtpdGVtLnJhd30+YDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgICAgIGxldCBhdHRyU3RyID0gJyc7XG4gICAgICAgIGlmIChpdGVtLmF0dHJpYnMgJiYgT2JqZWN0LmtleXMoaXRlbS5hdHRyaWJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlcyBhbnkgYXR0cmlidXRlcyB0aGF0IGhhdmUgYSB2YWx1ZSBvZiB1bmRlZmluZWRcbiAgICAgICAgICBsZXQgYXR0cnMgPSBPYmplY3Qua2V5cyhpdGVtLmF0dHJpYnMpLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uYXR0cmlic1trZXldICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSlcbiAgICAgICAgICBcbiAgICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9PVwiJHtpdGVtLmF0dHJpYnNba2V5XX1cImApO1xuICAgICAgICAgIGlmIChhdHRycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhdHRyc1swXSA9IGAgJHthdHRyc1swXX1gO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyU3RyID0gYXR0cnMuam9pbignICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoIW9yaWdpbmFsLnJlbmRlcikge1xuICAgICAgICAgICAgb3JpZ2luYWwgPSBwYXJlbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBodG1sKGl0ZW0uY2hpbGRyZW4sIG9yaWdpbmFsLCBlYWNoRm4pXG4gICAgICAgICAgcmVzdWx0ID0gYDwke2l0ZW0ubmFtZX0ke2F0dHJTdHJ9PiR7Y2hpbGRyZW59PC8ke2l0ZW0ubmFtZX0+YDtcbiAgICAgICAgfSBlbHNlIGlmICh2b2lkRWxlbWVudHMuaW5jbHVkZXMoaXRlbS5uYW1lKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGA8JHtpdGVtLm5hbWV9JHthdHRyU3RyfSAvPmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gYDwke2l0ZW0ubmFtZX0+PC8ke2l0ZW0ubmFtZX0+YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgY2FzZSAnY2RhdGEnOlxuICAgICAgICByZXR1cm4gYDwhW0NEQVRBWyR7aXRlbS5kYXRhfV1dPmBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlbTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGRvbSwgZWFjaEZuKSA9PiBodG1sKGRvbSwgbnVsbCwgZWFjaEZuKTsiXX0=
>>>>>>> Stashed changes
